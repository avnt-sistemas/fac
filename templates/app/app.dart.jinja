import 'package:flutter_gen/gen_l10n/app_localizations.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'theme/app_theme.dart';
import 'routes.dart';
{%- if has_auth %}
import '../features/auth/presentation/controllers/auth_controller.dart';
{%- endif %}
{%- for module in modules %}
import '../features/{{ module.snake_name }}/presentation/controllers/{{ module.snake_name }}_controller.dart';
import '../features/{{ module.snake_name }}/data/repositories/{{ module.snake_name }}_repository_impl.dart';
import '../features/{{ module.snake_name }}/domain/usecases/get_all_{{ module.snake_name }}_usecase.dart';
import '../features/{{ module.snake_name }}/domain/usecases/get_by_id_{{ module.snake_name }}_usecase.dart';
import '../features/{{ module.snake_name }}/domain/usecases/create_{{ module.snake_name }}_usecase.dart';
import '../features/{{ module.snake_name }}/domain/usecases/update_{{ module.snake_name }}_usecase.dart';
import '../features/{{ module.snake_name }}/domain/usecases/delete_{{ module.snake_name }}_usecase.dart';
{%- if module.soft_delete %}
import '../features/{{ module.snake_name }}/domain/usecases/restore_{{ module.snake_name }}_usecase.dart';
import '../features/{{ module.snake_name }}/domain/usecases/hard_delete_{{ module.snake_name }}_usecase.dart';
import '../features/{{ module.snake_name }}/domain/usecases/get_all_with_deleted_{{ module.snake_name }}_usecase.dart';
{%- endif %}
{%- endfor %}
import 'package:sqflite/sqflite.dart';

class MyApp extends StatelessWidget {
  final Database database;

  const MyApp({Key? key, required this.database}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
{%- if has_auth %}
        ChangeNotifierProvider(create: (_) => AuthController()),
{%- endif %}
{%- for module in modules %}
        ChangeNotifierProvider(
          create: (_) {
            // Criar reposit√≥rio uma vez para reutilizar
            final repository = {{ module.name }}RepositoryImpl(database: database);

            return {{ module.name }}Controller(
              getAllUseCase: GetAll{{ module.name }}UseCase(
                repository: repository,
              ),
              getByIdUseCase: GetById{{ module.name }}UseCase(
                repository: repository,
              ),
              createUseCase: Create{{ module.name }}UseCase(
                repository: repository,
              ),
              updateUseCase: Update{{ module.name }}UseCase(
                repository: repository,
              ),
              deleteUseCase: Delete{{ module.name }}UseCase(
                repository: repository,
              ),
{%- if module.soft_delete %}
              restoreUseCase: Restore{{ module.name }}UseCase(
                repository: repository,
              ),
              hardDeleteUseCase: HardDelete{{ module.name }}UseCase(
                repository: repository,
              ),
              getAllWithDeletedUseCase: GetAllWithDeleted{{ module.name }}UseCase(
                repository: repository,
              ),
{%- endif %}
            );
          },
        ),
{%- endfor %}
      ],
      child: MaterialApp(
        title: '{{ app_name }}',
        theme: AppTheme.lightTheme(),
        darkTheme: AppTheme.darkTheme(),
        themeMode: ThemeMode.system,
        initialRoute: AppRoutes.initial,
        routes: AppRoutes.routes,
        debugShowCheckedModeBanner: false,

        // üëá Aqui est√° o suporte a i18n
        localizationsDelegates: const [
          AppLocalizations.delegate,
          GlobalMaterialLocalizations.delegate,
          GlobalWidgetsLocalizations.delegate,
          GlobalCupertinoLocalizations.delegate,
        ],
        supportedLocales: AppLocalizations.supportedLocales,
        // locale: Locale('pt'), // descomente para for√ßar um idioma espec√≠fico
      ),
    );
  }
}