import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:path/path.dart';
import 'package:sqflite/sqflite.dart';
import '../core/data/datasources/sqlite_service.dart';
import '../core/data/datasources/sqlite_migration_manager.dart';

/// Database initializer for the application
class DatabaseInitializer {
  static const String databaseName = '{{ app_name|lower|replace(" ", "_") }}';
  static const int databaseVersion = 1;

  /// Initialize the database and return the instance
  static Future<Database> initializeDatabase() async {
    try {
      // Create SQLiteService instance
      final sqliteService = SQLiteService();


      // Initialize database
      final database = await sqliteService.database;

      if (kDebugMode) {
        print('Database initialized successfully');
        _printDatabaseInfo(database);
      }

      return database;
    } catch (e) {
      if (kDebugMode) {
        print('Error initializing database: $e');
      }
      rethrow;
    }
  }

  /// Print database information (tables, etc.) for debugging
  static Future<void> _printDatabaseInfo(Database db) async {
    // Get list of all tables
    final tables = await db.rawQuery(
      "SELECT name FROM sqlite_master WHERE type='table';",
    );

    print('Database tables:');
    for (final table in tables) {
      final tableName = table['name'] as String;
      if (!tableName.startsWith('sqlite_')) {
        print('- $tableName');

        // Get table structure
        final tableInfo = await db.rawQuery('PRAGMA table_info($tableName);');
        for (final column in tableInfo) {
          print('  - ${column['name']} (${column['type']})');
        }
      }
    }
  }
}