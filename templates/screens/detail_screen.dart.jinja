import 'package:flutter_gen/gen_l10n/app_localizations.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../../app/theme/app_text_styles.dart';
import '../../../../app/theme/dimensions.dart';
import '../../../../core/widgets/loading_indicator.dart';
import '../../domain/entities/{{ snake_case_name }}_entity.dart';
import '../controllers/{{ snake_case_name }}_controller.dart';
{%- if has_relationships %}
{%- for rel in relationships.direct %}
import '../../../{{ rel.to_module|lower }}/domain/entities/{{ rel.to_module|lower }}_entity.dart';
import '../../../{{ rel.to_module|lower }}/presentation/controllers/{{ rel.to_module|lower }}_controller.dart';
{%- endfor %}
{#    {{ relationships.reverse | tojson }}#}
{%- for rel in relationships.reverse %}
import '../../../{{ rel.snake_name }}/domain/entities/{{ rel.snake_name }}_entity.dart';
import '../../../{{ rel.snake_name }}/presentation/controllers/{{ rel.snake_name }}_controller.dart';
{%- endfor %}
{%- endif %}

class {{ entity_name }}DetailScreen extends StatefulWidget {
  const {{ entity_name }}DetailScreen({super.key});

  @override
  State<{{ entity_name }}DetailScreen> createState() => _{{ entity_name }}DetailScreenState();
}

class _{{ entity_name }}DetailScreenState extends State<{{ entity_name }}DetailScreen> {
  late {{ entity_name }}Controller _controller;
  {{ entity_name }}Entity? _item;
  bool _isLoading = false;
{%- if has_relationships %}

  // Reference controllers and cached data
{%- for rel in relationships.direct %}
  late {{ rel.to_module }}Controller _{{ rel.camel_name }}Controller;
{%- endfor %}

{%- for rel in relationships.direct %}
  {{ rel.to_module }}Entity? _related{{ rel.pascal_name }};
{%- endfor %}

{%- for from_module in relationships.reverse | map(attribute='from_module') | unique | list %}
  late {{ from_module }}Controller _{{ from_module.lower() }}Controller;
{%- endfor %}

{%- for rel in relationships.reverse %}
  List<{{ rel.from_module }}Entity> _{{ rel.camel_property }} = [];
{%- endfor %}
{%- endif %}

  @override
  void initState() {
    super.initState();
    _controller = Provider.of<{{ entity_name }}Controller>(context, listen: false);
{%- if has_relationships %}

    // Initialize reference controllers
{%- for rel in relationships.direct %}
    _{{ rel.camel_name}}Controller = Provider.of<{{ rel.to_module }}Controller>(context, listen: false);
{%- endfor %}
{%- for from_module in relationships.reverse | map(attribute='from_module') | unique | list %}
    _{{ from_module.lower() }}Controller = Provider.of<{{ from_module }}Controller>(context, listen: false);
{%- endfor %}
{%- endif %}
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final args = ModalRoute.of(context)?.settings.arguments;
    if (args is {{ entity_name }}Entity) {
      _item = args;
{%- if has_relationships %}
      _loadRelatedData();
{%- endif %}
    } else if (args is String) {
      _loadItem(args);
    } else {
      Navigator.pop(context);
    }
  }

  Future<void> _loadItem(String id) async {
    setState(() {
      _isLoading = true;
    });

    try {
      final item = await _controller.getById(id);
      if (item == null) {
        if (mounted) {
          Navigator.pop(context);
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              //content: Text('{{ entity_name }} not found'),
              content: Text(AppLocalizations.of(context)!.notFound( '{{ entity_name }}')),
              backgroundColor: Colors.red,
            ),
          );
        }
      } else {
        setState(() {
          _item = item;
        });
{%- if has_relationships %}
        await _loadRelatedData();
{%- endif %}
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            //content: Text('Error loading {{ entity_name }}: $e'),
            content: Text(AppLocalizations.of(context)!.errorLoading( '{{ entity_name }}')),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

{%- if has_relationships %}
  Future<void> _loadRelatedData() async {
    if (_item == null) return;

    setState(() {
      _isLoading = true;
    });

    try {
{%- for rel in relationships.direct %}
      // Load related {{ rel.to_module.lower() }}
      if (_item!.{{ rel.field_name }} != null && _item!.{{ rel.field_name }}!.isNotEmpty) {
        _related{{ rel.pascal_name }} = await _{{ rel.camel_name }}Controller.getById(_item!.{{ rel.field_name }}!);
      }
{%- endfor %}

{%- for rel in relationships.reverse %}
      // Load related {{ rel.from_module }} list ({{ rel.property_name }})
      await _{{ rel.from_module.lower() }}Controller.getAll();
      _{{ rel.camel_property }} = _{{ rel.from_module.lower() }}Controller.items
          .where((item) => item.{{ rel.field_name }} == _item!.id)
          .toList();
{%- endfor %}

      if (mounted) {
        setState(() {});
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('${AppLocalizations.of(context)!.errorLoadingRelated}: $e'),
            backgroundColor: Colors.orange,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }
{%- endif %}

  @override
  Widget build(BuildContext context) {
    if (_item == null) {
      return Scaffold(
        appBar: AppBar(
          title: Text(AppLocalizations.of(context)!.detailsTitle('{{entity_name}}')),
        ),
        body: const LoadingIndicator(),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: const Text('{{ entity_name }} Details'),
        actions: [
          IconButton(
            icon: const Icon(Icons.edit),
            onPressed: () {
              Navigator.pushNamed(
                context,
                '/{{ snake_case_name }}/edit',
                arguments: _item,
              ).then((_) {
                // Refresh the item after edit
                if (_item != null) {
                  _loadItem(_item!.id);
                }
              });
            },
          ),
          IconButton(
            icon: const Icon(Icons.delete),
            onPressed: () {
              _showDeleteConfirmation(context, _item!);
            },
          ),
        ],
      ),
      body: _isLoading
          ? const LoadingIndicator()
          : SingleChildScrollView(
              padding: const EdgeInsets.all(Dimensions.paddingM),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildHeader(),
                  const SizedBox(height: Dimensions.marginL),
                  _buildDetails(),
{%- if has_relationships %}
                  const SizedBox(height: Dimensions.marginL),
                  _buildRelationships(),
{%- endif %}
                ],
              ),
            ),
    );
  }

  Widget _buildHeader() {
    return Card(
      elevation: Dimensions.elevationS,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(Dimensions.radiusM),
      ),
      child: Padding(
        padding: const EdgeInsets.all(Dimensions.paddingM),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
{%- for field in fields %}
{%- if loop.first %}
              _item!.{{ field.name }}{%- if field.type != 'String' %}.toString(){%- endif %},
{%- endif %}
{%- endfor %}
              style: AppTextStyles.headline5,
            ),
            const Divider(),
            const SizedBox(height: Dimensions.marginS),
            Row(
              children: [
                const Icon(Icons.calendar_today, size: 16),
                const SizedBox(width: Dimensions.marginS),
                Text(
                  '${AppLocalizations.of(context)!.createdLabel}: ${_item!.createdAt.toString().substring(0, 10)}',
                  style: AppTextStyles.caption,
                ),
                const SizedBox(width: Dimensions.marginM),
                const Icon(Icons.update, size: 16),
                const SizedBox(width: Dimensions.marginS),
                Text(
                  '${AppLocalizations.of(context)!.updatedLabel}: ${_item!.updatedAt.toString().substring(0, 10)}',
                  style: AppTextStyles.caption,
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDetails() {
    return Card(
      elevation: Dimensions.elevationS,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(Dimensions.radiusM),
      ),
      child: Padding(
        padding: const EdgeInsets.all(Dimensions.paddingM),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              AppLocalizations.of(context)!.detailsSectionTitle,
              style: AppTextStyles.headline6,
            ),
            const Divider(),
            const SizedBox(height: Dimensions.marginS),
{#            {{ relationships | tojson }}#}
{%- for rel in relationships.direct %}
            _buildDetailRow(
              '{{ rel.field_name }}',
              _related{{ rel.pascal_name }}?.title ?? _related{{ rel.pascal_name }}?.id ?? 'N/A',
              Icons.link,
              onTap: _related{{ rel.pascal_name }} != null ? () {
                Navigator.pushNamed(
                  context,
                  '/{{ rel.snake_name }}/detail',
                  arguments: _related{{ rel.pascal_name }},
                );
              } : null,
            ),
{%- endfor %}
{%- for field in fields %}
{%- if field.type == 'reference' %}
{#            _buildDetailRow(#}
{#              '{{ field.name | capitalize }}',#}
{#              _related{{ field.reference }}?.title ?? _related{{ field.reference }}?.id ?? 'N/A',#}
{#              Icons.link,#}
{#              onTap: _related{{ field.reference }} != null ? () {#}
{#                Navigator.pushNamed(#}
{#                  context,#}
{#                  '/{{ field.reference|lower }}/detail',#}
{#                  arguments: _related{{ field.reference }},#}
{#                );#}
{#              } : null,#}
{#            ),#}
{%- else %}
            _buildDetailRow(
              '{{ field.name | capitalize }}',
              _item!.{{ field.name }}{%- if field.type == 'DateTime' or field.type == 'DateTime?' %}?.toString().substring(0, 10) ?? 'N/A'{%- elif field.type != 'String' %}?.toString() ?? 'N/A'{%- else %} ?? 'N/A'{%- endif %},
              Icons.{%- if field.type == 'String' %}text_fields{%- elif field.type == 'int' or field.type == 'double' %}numbers{%- elif field.type == 'bool' %}check_circle{%- elif field.type == 'DateTime' or field.type == 'DateTime?' %}calendar_today{%- elif field.type.startswith('List') %}list{%- else %}info{%- endif %},
            ),
{%- endif %}
{%- endfor %}
          ],
        ),
      ),
    );
  }

{%- if has_relationships %}
  Widget _buildRelationships() {
    return Column(
      children: [
{%- for rel in relationships.reverse %}
        _buildRelatedSection(
          '{{ rel.property_name|replace("ListAs", " as ") }}',
          _{{ rel.camel_property }},
          (item) => item.title ?? item.id, // Assuming name field exists
          (item) {
            Navigator.pushNamed(
              context,
              '/{{ rel.snake_name }}/detail',
              arguments: item,
            );
          },
          () {
            Navigator.pushNamed(
              context,
              '/{{ rel.snake_name }}/create',
              arguments: {'{{ rel.field_name }}': _item!.id},
            ).then((_) => _loadRelatedData());
          },
        ),
        const SizedBox(height: Dimensions.marginM),
{%- endfor %}
      ],
    );
  }

  Widget _buildRelatedSection<T>(
    String title,
    List<T> items,
    String Function(T) getDisplayText,
    void Function(T) onItemTap,
    VoidCallback onAddNew,
  ) {
    return Card(
      elevation: Dimensions.elevationS,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(Dimensions.radiusM),
      ),
      child: Padding(
        padding: const EdgeInsets.all(Dimensions.paddingM),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  '$title (${items.length})',
                  style: AppTextStyles.headline6,
                ),
                IconButton(
                  icon: const Icon(Icons.add),
                  onPressed: onAddNew,
                  tooltip: 'Add new $title',
                ),
              ],
            ),
            const Divider(),
            if (items.isEmpty)
              Padding(
                padding: const EdgeInsets.all(Dimensions.paddingM),
                child: Text(
                  'No $title found',
                  style: AppTextStyles.caption,
                ),
              )
            else
              ...items.map((item) => ListTile(
                title: Text(getDisplayText(item)),
                trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                onTap: () => onItemTap(item),
                dense: true,
              )).toList(),
          ],
        ),
      ),
    );
  }
{%- endif %}

  Widget _buildDetailRow(
    String label,
    String value,
    IconData icon,
    {VoidCallback? onTap}
  ) {
    return Padding(
      padding: const EdgeInsets.only(bottom: Dimensions.paddingS),
      child: InkWell(
        onTap: onTap,
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Icon(icon, size: 20),
            const SizedBox(width: Dimensions.marginM),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    label,
                    style: AppTextStyles.subtitle2,
                  ),
                  Text(
                    value,
                    style: AppTextStyles.bodyText2,
                  ),
                ],
              ),
            ),
            if (onTap != null)
              const Icon(Icons.arrow_forward_ios, size: 16),
          ],
        ),
      ),
    );
  }

  void _showDeleteConfirmation(BuildContext context, {{ entity_name }}Entity item) {
    final t = AppLocalizations.of(context)!;
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        //title: const Text('Confirm Deletion'),
        title: Text(AppLocalizations.of(context)!.confirmDelete),
        content: Text(
{% if has_relationships and relationships.reverse %}
          '${t.confirmDeleteMsg(t.{{ camel_name }}Gender, t.{{ camel_name }}Singular)}\n\n'
          '${t.deleteEffect}:\n'
{% for rel in relationships.reverse %}
          '• ${item.{{ rel.property_name }}.length} ${t.{{ rel.camel_name }}Plural.toLowerCase()}\n'
{% endfor %}
          '\n${t.irreversible}.',
{% else %}
          t.confirmDeleteMsg(t.{{ camel_name }}Gender, t.{{ camel_name }}Singular),
{% endif %}
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: Text(AppLocalizations.of(context)!.btnCancel),
          ),
          TextButton(
            onPressed: () async {
              Navigator.of(context).pop();
              try {
{%- if soft_delete is defined and soft_delete %}
                await _controller.delete(item.id);
{%- else %}
                await _controller.delete(item.id);
{%- endif %}
                if (mounted) {
                  Navigator.of(context).pop();
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      //content: Text('{{ entity_name }} deleted successfully'),
                    content: Text(t.deletedSuccess(t.{{ camel_name }}Gender, t.{{ camel_name }}Singular)),
                    ),
                  );
                }
              } catch (e) {
                if (mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Error deleting {{ entity_name }}: $e'),
                      backgroundColor: Colors.red,
                    ),
                  );
                }
              }
            },
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: Text(AppLocalizations.of(context)!.btnDelete),
          ),
        ],
      ),
    );
  }
}