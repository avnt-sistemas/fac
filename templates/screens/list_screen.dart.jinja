import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../../core/screens/responsive_base_screen.dart';
import '../../../../core/widgets/error_message.dart';
import '../../../../core/widgets/loading_indicator.dart';
import '../../../../core/widgets/empty_list.dart';
import '../../domain/entities/{{ snake_case_name }}_entity.dart';
import '../controllers/{{ snake_case_name }}_controller.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart';

{% if has_relationships %}
{% for rel in relationships.direct | unique(attribute='to_module') %}
import '../../../{{ rel.to_module|lower }}/domain/entities/{{ rel.to_module|lower }}_entity.dart';
import '../../../{{ rel.to_module|lower }}/presentation/controllers/{{ rel.to_module|lower }}_controller.dart';
{% endfor %}
{% endif %}

class {{ entity_name }}ListScreen extends StatefulWidget {
  const {{ entity_name }}ListScreen({super.key});

  @override
  State<{{ entity_name }}ListScreen> createState() => _{{ entity_name }}ListScreenState();
}

class _{{ entity_name }}ListScreenState extends State<{{ entity_name }}ListScreen> {
  late {{ entity_name }}Controller _controller;
  Future<void>? _dataFuture;  // Inicialmente nulo
  String _searchTerm = '';
{% if has_relationships %}
  // Reference controllers for loading related data
{% for rel in relationships.direct %}
  late {{ rel.to_module }}Controller _{{ rel.camel_name }}Controller;
  Map<String, {{ rel.to_module }}Entity> _{{ rel.camel_name }}Cache = {};
{% endfor %}
{% endif %}

  @override
  void initState() {
    super.initState();
    _controller = Provider.of<{{ entity_name }}Controller>(context, listen: false);
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _ensureDataLoaded();
    });
{% if has_relationships %}

    // Initialize reference controllers
{% for rel in relationships.direct %}
    _{{ rel.camel_name }}Controller = Provider.of<{{ rel.to_module }}Controller>(context, listen: false);
{% endfor %}
{% endif %}
    // Não iniciamos o carregamento aqui
  }

  // Este método será chamado no método build, depois que o framework terminar de construir o widget
  Future<void> _ensureDataLoaded() {
    if (_dataFuture == null) {
      setState(() {
        _dataFuture = _loadAllData();
      });
    }
    return _dataFuture!;
  }

  Future<void> _loadAllData() async {
    // Load main data
    await _controller.getAll();

{% if has_relationships %}
    // Load reference data for displaying related information
{% for rel in relationships.direct %}
    await _{{ rel.camel_name }}Controller.getAll();
    // Cache reference data for quick lookup
    for (var item in _{{ rel.camel_name }}Controller.items) {
      _{{ rel.camel_name }}Cache[item.id] = item;
    }
{% endfor %}
{% endif %}
  }

  Future<void> _refreshData() async {
    setState(() {
      _dataFuture = _loadAllData();
    });
    return _dataFuture!;
  }

  @override
  Widget build(BuildContext context) {
    final t = AppLocalizations.of(context)!;

    return ResponsiveBaseScreen(
      title: t.{{ camel_name }}List,
      onItemSelected: (i) {},
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          Navigator.pushNamed(
            context,
            '/{{ snake_case_name }}/create',
          ).then((_) => _refreshData());
        },
        child: const Icon(Icons.add),
      ),
      child: FutureBuilder(
        future: _ensureDataLoaded(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const LoadingIndicator();
          }

          if (snapshot.hasError) {
            return ErrorMessage(
              message: snapshot.error.toString(),
              onRetry: _refreshData,
            );
          }

          return Consumer<{{ entity_name }}Controller>(
            builder: (context, controller, child) {
              final filtered = controller.items.where((item) {
                return item.title.toLowerCase().contains(_searchTerm.toLowerCase());
              }).toList();

              return Column(
                children: [
                  Padding(
                    padding: const EdgeInsets.all(16),
                    child: Row(
                      children: [
                        Expanded(
                          child: TextField(
                            decoration: InputDecoration(
                              labelText: t.search,
                              prefixIcon: const Icon(Icons.search),
                              border: const OutlineInputBorder(),
                            ),
                            onChanged: (value) {
                              setState(() => _searchTerm = value);
                            },
                          ),
                        ),
                        const SizedBox(width: 12),
                        ElevatedButton.icon(
                          icon: const Icon(Icons.file_upload),
                          label: Text(t.btnImport),
                          onPressed: () {},
                        ),
                        const SizedBox(width: 8),
                        ElevatedButton.icon(
                          icon: const Icon(Icons.file_download),
                          label: Text(t.btnExport),
                          onPressed: () {},
                        ),
                      ],
                    ),
                  ),
                  Expanded(
                    child: LayoutBuilder(
                      builder: (context, constraints) {
                        if (constraints.maxWidth < 600) {
                          return _buildCardList(filtered, t);
                        } else {
                          return _buildDataTable(filtered, t);
                        }
                      },
                    ),
                  ),
                ],
              );
            },
          );
        },
      ),
    );
  }

  Widget _buildCardList(List<{{ entity_name }}Entity> items, AppLocalizations t) {
    if (items.isEmpty) return EmptyList(message: t.emptyList(t.{{ camel_name }}Gender, t.{{ camel_name }}Singular));

    return RefreshIndicator(
      onRefresh: _refreshData,
      child: ListView.builder(
        itemCount: items.length,
        itemBuilder: (context, index) => _buildItemCard(context, items[index]),
      ),
    );
  }

  Widget _buildDataTable(List<{{ entity_name }}Entity> items, AppLocalizations t) {
    if (items.isEmpty) return EmptyList(message: t.emptyList(t.{{ camel_name }}Gender, t.{{ camel_name }}Singular));

    return ConstrainedBox(
      constraints: const BoxConstraints(minWidth: double.infinity),
      child: SingleChildScrollView(
        scrollDirection: Axis.vertical,
        child: DataTable(
          columns: [
            {% set first_field = fields[0] %}
            DataColumn(label: Text(t.{{ camel_name }}{{ first_field.name|capitalize }}Label)),
            {% for field in fields[1:3] %}
            DataColumn(label: Text(t.{{ camel_name }}{{ field.name|capitalize }}Label)),
            {% endfor %}
            DataColumn(label: Text(t.actions)),
          ],
          rows: items.map((item) {
            return DataRow(
              cells: [
                DataCell(Text(item.title)),
                {% for field in fields[1:3] %}
                DataCell(Text(item.{{ field.name }}?.toString() ?? '-')),
                {% endfor %}
                DataCell(Row(
                  children: [
                    IconButton(
                      icon: const Icon(Icons.edit, color: Colors.blue),
                      onPressed: () {
                        Navigator.pushNamed(context, '/{{ snake_case_name }}/edit', arguments: item)
                            .then((_) => _refreshData());
                      },
                    ),
                    IconButton(
                      icon: const Icon(Icons.delete, color: Colors.red),
                      onPressed: () => _showDeleteConfirmation(context, item),
                    ),
                  ],
                )),
              ],
            );
          }).toList(),
        ),
      )
    );
  }

  Widget _buildItemCard(BuildContext context, {{ entity_name }}Entity item) {
    final t = AppLocalizations.of(context)!;
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: ListTile(
        title: Text(
{%- for field in fields %}
{%- if loop.first %}
          item.title,
{%- endif %}
{%- endfor %}
          style: const TextStyle(fontWeight: FontWeight.bold),
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
{%- for field in fields %}
{%- if not loop.first and loop.index <= 3 %}
{%- if field.type != 'reference' %}
            Text('${t.{{ camel_name }}{{ field.name | capitalize }}Label}: ${item.{{ field.name }}{% if field.type == 'DateTime' or field.type == 'DateTime?' %}?.toString().substring(0, 10) ?? 'N/A'{% elif field.type != 'String' %}?.toString() ?? 'N/A'{% else %} ?? 'N/A'{% endif %}}'),
{%- endif %}
{%- endif %}
{%- endfor %}
{%- if has_relationships %}
{%- if relationships.direct %}
{%- for rel in relationships.direct %}
            Text('${t.{{ camel_name }}{{ rel.field_name|capitalize }}Label}: ${_get{{ rel.pascal_name }}Name(item.{{ rel.field_name }})}'),
{%- endfor %}
{%- endif %}
{%- if relationships.reverse %}
            // Show count of related items
{%- for rel in relationships.reverse %}
            Text('${item.{{ rel.property_name }}.length} ${t.{{ rel.camel_name }}Plural.toLowerCase()}'),
{%- endfor %}
{%- endif %}
{%- endif %}
          ],
        ),
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              icon: const Icon(Icons.edit, color: Colors.blue),
              onPressed: () {
                Navigator.pushNamed(
                  context,
                  '/{{ snake_case_name }}/edit',
                  arguments: item,
                ).then((_) => _refreshData());
              },
            ),
            IconButton(
              icon: const Icon(Icons.delete, color: Colors.red),
              onPressed: () {
                _showDeleteConfirmation(context, item);
              },
            ),
          ],
        ),
        onTap: () {
          Navigator.pushNamed(
            context,
            '/{{ snake_case_name }}/detail',
            arguments: item,
          );
        },
      ),
    );
  }

{% if has_relationships %}
  // Helper methods to get related entity names
{% for rel in relationships.direct %}
  String _get{{ rel.pascal_name }}Name(String? {{ rel.field_name }}) {
    if ({{ rel.field_name }} == null || {{ rel.field_name }}.isEmpty) return 'N/A';
    final related = _{{ rel.camel_name }}Cache[{{ rel.field_name }}];
    return related?.title ?? related?.id ?? 'Unknown'; // Assuming name field exists, fallback to id
  }
{% endfor %}
{% endif %}

  void _showDeleteConfirmation(BuildContext context, {{ entity_name }}Entity item) {
    final t = AppLocalizations.of(context)!;
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(t.confirmDelete),
        content: Text(
{% if has_relationships and relationships.reverse %}
          '${t.confirmDeleteMsg(t.{{ camel_name }}Gender, t.{{ camel_name }}Singular)}\n\n'
          '${t.deleteEffect}:\n'
{% for rel in relationships.reverse %}
          '• ${item.{{ rel.property_name }}.length} ${t.{{ rel.camel_name }}Plural.toLowerCase()}\n'
{% endfor %}
          '\n${t.irreversible}.',
{% else %}
          t.confirmDeleteMsg(t.{{ camel_name }}Gender, t.{{ camel_name }}Singular),
{% endif %}
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: Text(t.btnCancel),
          ),
          TextButton(
            onPressed: () async {
              Navigator.of(context).pop();
              try {
{%- if soft_delete is defined and soft_delete %}
                await _controller.delete(item.id);
{%- else %}
                await _controller.delete(item.id);
{%- endif %}
                _refreshData(); // Atualizar a lista após excluir
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(t.deletedSuccess(t.{{ camel_name }}Gender, t.{{ camel_name }}Singular)),
                  ),
                );
              } catch (e) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(t.deletedError(t.{{ camel_name }}Gender, t.{{ camel_name }}Singular)),
                    backgroundColor: Colors.red,
                  ),
                );
              }
            },
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: Text(t.btnDelete),
          ),
        ],
      ),
    );
  }
}