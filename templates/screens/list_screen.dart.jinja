import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../../core/widgets/error_message.dart';
import '../../../../core/widgets/loading_indicator.dart';
import '../../../../core/widgets/empty_list.dart';
import '../../domain/entities/{{ snake_case_name }}_entity.dart';
import '../controllers/{{ snake_case_name }}_controller.dart';
{% if has_relationships %}
{% for rel in relationships.direct %}
import '../../../{{ rel.to_module|lower }}/domain/entities/{{ rel.to_module|lower }}_entity.dart';
import '../../../{{ rel.to_module|lower }}/presentation/controllers/{{ rel.to_module|lower }}_controller.dart';
{% endfor %}
{% endif %}

class {{ entity_name }}ListScreen extends StatefulWidget {
  const {{ entity_name }}ListScreen({Key? key}) : super(key: key);

  @override
  State<{{ entity_name }}ListScreen> createState() => _{{ entity_name }}ListScreenState();
}

class _{{ entity_name }}ListScreenState extends State<{{ entity_name }}ListScreen> {
  late {{ entity_name }}Controller _controller;
  Future<void>? _dataFuture;  // Inicialmente nulo
{% if has_relationships %}

  // Reference controllers for loading related data
{% for rel in relationships.direct %}
  late {{ rel.to_module }}Controller _{{ rel.to_module.lower() }}Controller;
  Map<String, {{ rel.to_module }}Entity> _{{ rel.to_module.lower() }}Cache = {};
{% endfor %}
{% endif %}

  @override
  void initState() {
    super.initState();
    _controller = Provider.of<{{ entity_name }}Controller>(context, listen: false);
{% if has_relationships %}

    // Initialize reference controllers
{% for rel in relationships.direct %}
    _{{ rel.to_module.lower() }}Controller = Provider.of<{{ rel.to_module }}Controller>(context, listen: false);
{% endfor %}
{% endif %}
    // Não iniciamos o carregamento aqui
  }

  // Este método será chamado no método build, depois que o framework terminar de construir o widget
  Future<void> _ensureDataLoaded() {
    if (_dataFuture == null) {
      setState(() {
        _dataFuture = _loadAllData();
      });
    }
    return _dataFuture!;
  }

  Future<void> _loadAllData() async {
    // Load main data
    await _controller.getAll();

{% if has_relationships %}
    // Load reference data for displaying related information
{% for rel in relationships.direct %}
    await _{{ rel.to_module.lower() }}Controller.getAll();
    // Cache reference data for quick lookup
    for (var item in _{{ rel.to_module.lower() }}Controller.items) {
      _{{ rel.to_module.lower() }}Cache[item.id] = item;
    }
{% endfor %}
{% endif %}
  }

  Future<void> _refreshData() async {
    setState(() {
      _dataFuture = _loadAllData();
    });
    return _dataFuture!;
  }

  @override
  Widget build(BuildContext context) {
    // Iniciamos o carregamento aqui, depois que o widget foi construído
    _ensureDataLoaded();

    return Scaffold(
      appBar: AppBar(
        title: const Text('{{ entity_name }}s'),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _refreshData,
          ),
        ],
      ),
      body: FutureBuilder(
        future: _dataFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const LoadingIndicator();
          }

          if (snapshot.hasError) {
            return ErrorMessage(
              message: snapshot.error.toString(),
              onRetry: _refreshData,
            );
          }

          return Consumer<{{ entity_name }}Controller>(
            builder: (context, controller, child) {
              if (controller.items.isEmpty) {
                return Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const EmptyList(message: 'No {{ entity_name }}s found'),
                      const SizedBox(height: 16),
                      ElevatedButton(
                        onPressed: () {
                          Navigator.pushNamed(
                            context,
                            '/{{ snake_case_name }}/create',
                          ).then((_) => _refreshData());
                        },
                        child: const Text('Create {{ entity_name }}'),
                      ),
                    ],
                  ),
                );
              }

              return RefreshIndicator(
                onRefresh: _refreshData,
                child: ListView.builder(
                  itemCount: controller.items.length,
                  itemBuilder: (context, index) {
                    final item = controller.items[index];
                    return _buildItemCard(context, item);
                  },
                ),
              );
            },
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          Navigator.pushNamed(
            context,
            '/{{ snake_case_name }}/create',
          ).then((_) => _refreshData());
        },
        child: const Icon(Icons.add),
      ),
    );
  }

  Widget _buildItemCard(BuildContext context, {{ entity_name }}Entity item) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: ListTile(
        title: Text(
{%- for field in fields %}
{%- if loop.first %}
          item.{{ field.name }}{% if field.type != 'String' %}.toString(){% endif %},
{%- endif %}
{%- endfor %}
          style: const TextStyle(fontWeight: FontWeight.bold),
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
{%- for field in fields %}
{%- if not loop.first and loop.index <= 3 %}
{%- if field.type == 'reference' %}
            Text('{{ field.name | capitalize }}: ${_get{{ field.reference }}Name(item.{{ field.name }})}'),
{%- else %}
            Text('{{ field.name | capitalize }}: ${item.{{ field.name }}{% if field.type == 'DateTime' or field.type == 'DateTime?' %}?.toString().substring(0, 10) ?? 'N/A'{% elif field.type != 'String' %}?.toString() ?? 'N/A'{% else %} ?? 'N/A'{% endif %}}'),
{%- endif %}
{%- endif %}
{%- endfor %}
{% if has_relationships and relationships.reverse %}
            // Show count of related items
{% for rel in relationships.reverse %}
            Text('{{ rel.property_name|capitalize|replace("ListAs", " as ") }}: ${item.{{ rel.property_name }}.length}'),
{% endfor %}
{% endif %}
          ],
        ),
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              icon: const Icon(Icons.edit, color: Colors.blue),
              onPressed: () {
                Navigator.pushNamed(
                  context,
                  '/{{ snake_case_name }}/edit',
                  arguments: item,
                ).then((_) => _refreshData());
              },
            ),
            IconButton(
              icon: const Icon(Icons.delete, color: Colors.red),
              onPressed: () {
                _showDeleteConfirmation(context, item);
              },
            ),
          ],
        ),
        onTap: () {
          Navigator.pushNamed(
            context,
            '/{{ snake_case_name }}/detail',
            arguments: item,
          );
        },
      ),
    );
  }

{% if has_relationships %}
  // Helper methods to get related entity names
{% for rel in relationships.direct %}
  String _get{{ rel.to_module }}Name(String? {{ rel.field_name }}) {
    if ({{ rel.field_name }} == null || {{ rel.field_name }}.isEmpty) return 'N/A';
    final related = _{{ rel.to_module.lower() }}Cache[{{ rel.field_name }}];
    return related?.name ?? related?.id ?? 'Unknown'; // Assuming name field exists, fallback to id
  }
{% endfor %}
{% endif %}

  void _showDeleteConfirmation(BuildContext context, {{ entity_name }}Entity item) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Confirm Deletion'),
        content: Text(
{% if has_relationships and relationships.reverse %}
          'Are you sure you want to delete this {{ entity_name }}?\n\n'
          'This will also affect:\n'
{% for rel in relationships.reverse %}
          '• ${item.{{ rel.property_name }}.length} {{ rel.property_name|replace("ListAs", " as ")|capitalize }}\n'
{% endfor %}
          '\nThis action cannot be undone.',
{% else %}
          'Are you sure you want to delete this {{ entity_name }}? This action cannot be undone.',
{% endif %}
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () async {
              Navigator.of(context).pop();
              try {
{%- if soft_delete is defined and soft_delete %}
                await _controller.delete(item.id);
{%- else %}
                await _controller.delete(item.id);
{%- endif %}
                _refreshData(); // Atualizar a lista após excluir
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('{{ entity_name }} deleted successfully'),
                  ),
                );
              } catch (e) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Error deleting {{ entity_name }}: $e'),
                    backgroundColor: Colors.red,
                  ),
                );
              }
            },
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('Delete'),
          ),
        ],
      ),
    );
  }
}