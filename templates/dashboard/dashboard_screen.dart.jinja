import 'package:flutter/material.dart';
{% if has_bar_chart %}
import '../widgets/bar_chart_widget.dart';
{% endif %}
{% if has_pie_chart %}
import '../widgets/pie_chart_widget.dart';
{% endif %}
{% if has_line_chart %}
import '../widgets/line_chart_widget.dart';
{% endif %}
{% if has_kpi %}
import '../widgets/kpi_widget.dart';
{% endif %}
import '../../../../app/theme/dimensions.dart';

class DashboardScreen extends StatefulWidget {
  const DashboardScreen({super.key});

  @override
  State<DashboardScreen> createState() => _DashboardScreenState();
}

class _DashboardScreenState extends State<DashboardScreen> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Dashboard'),
      ),
      body: RefreshIndicator(
        onRefresh: _refreshData,
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(Dimensions.paddingM),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              _buildHeader(),
              const SizedBox(height: Dimensions.marginL),
              _buildDashboardWidgets(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Card(
      elevation: Dimensions.elevationS,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(Dimensions.radiusM),
      ),
      child: Padding(
        padding: const EdgeInsets.all(Dimensions.paddingM),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Welcome to Your Dashboard',
              style: Theme.of(context).textTheme.headline5,
            ),
            const SizedBox(height: Dimensions.marginS),
            Text(
              'Here you can see an overview of your data',
              style: Theme.of(context).textTheme.bodyText2,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDashboardWidgets() {
    return Column(
      children: [
{% if has_kpi %}
        _buildKPISection(),
        const SizedBox(height: Dimensions.marginL),
{% endif %}
{% if has_bar_chart or has_pie_chart or has_line_chart %}
        _buildChartsSection(),
{% endif %}
      ],
    );
  }

{% if has_kpi %}
  Widget _buildKPISection() {
    return GridView.count(
      crossAxisCount: 2,
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      crossAxisSpacing: Dimensions.marginM,
      mainAxisSpacing: Dimensions.marginM,
      children: const [
{% for widget in widgets %}
{% if widget.type == 'kpi' %}
        KPIWidget(
          title: '{{ widget.title }}',
          dataSource: '{{ widget.data_source }}',
          operation: '{{ widget.operation }}',
        ),
{% endif %}
{% endfor %}
      ],
    );
  }
{% endif %}

{% if has_bar_chart or has_pie_chart or has_line_chart %}
  Widget _buildChartsSection() {
    return Column(
      children: [
{% for widget in widgets %}
{% if widget.type == 'bar_chart' %}
        Card(
          elevation: Dimensions.elevationS,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(Dimensions.radiusM),
          ),
          child: Padding(
            padding: const EdgeInsets.all(Dimensions.paddingM),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '{{ widget.title }}',
                  style: Theme.of(context).textTheme.headline6,
                ),
                const SizedBox(height: Dimensions.marginM),
                const SizedBox(
                  height: 250,
                  child: BarChartWidget(
                    dataSource: '{{ widget.data_source }}',
                    groupBy: '{{ widget.group_by }}',
                  ),
                ),
              ],
            ),
          ),
        ),
{% elif widget.type == 'pie_chart' %}
        Card(
          elevation: Dimensions.elevationS,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(Dimensions.radiusM),
          ),
          child: Padding(
            padding: const EdgeInsets.all(Dimensions.paddingM),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '{{ widget.title }}',
                  style: Theme.of(context).textTheme.headline6,
                ),
                const SizedBox(height: Dimensions.marginM),
                const SizedBox(
                  height: 250,
                  child: PieChartWidget(
                    dataSource: '{{ widget.data_source }}',
                    groupBy: '{{ widget.group_by }}',
                  ),
                ),
              ],
            ),
          ),
        ),
{% elif widget.type == 'line_chart' %}
        Card(
          elevation: Dimensions.elevationS,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(Dimensions.radiusM),
          ),
          child: Padding(
            padding: const EdgeInsets.all(Dimensions.paddingM),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '{{ widget.title }}',
                  style: Theme.of(context).textTheme.headline6,
                ),
                const SizedBox(height: Dimensions.marginM),
                const SizedBox(
                  height: 250,
                  child: LineChartWidget(
                    dataSource: '{{ widget.data_source }}',
                    xAxis: '{{ widget.x_axis }}',
                    yAxis: '{{ widget.y_axis }}',
                  ),
                ),
              ],
            ),
          ),
        ),
{% endif %}
        const SizedBox(height: Dimensions.marginM),
{% endfor %}
      ],
    );
  }
{% endif %}

  Future<void> _refreshData() async {
    // Refresh data from repositories
    await Future.delayed(const Duration(seconds: 1));
    setState(() {});
  }
}