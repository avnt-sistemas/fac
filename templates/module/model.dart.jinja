import 'dart:convert';
import '../../domain/entities/{{ module_name|lower }}_entity.dart';

/// Data model for {{ pascal_case }}
class {{ pascal_case }}Model {
  final String id;
{%- for field in fields %}
  final {{ field.type }} {{ field.name }};
{%- endfor %}
  final DateTime createdAt;
  final DateTime updatedAt;
{%- if soft_delete %}
  final DateTime? deletedAt;  // Campo para soft delete
{%- endif %}

  {{ pascal_case }}Model({
    required this.id,
{%- for field in fields %}
  {%- if field.required %}
    required this.{{ field.name }},
  {%- elif field.default is defined %}
    this.{{ field.name }} = {{ field.default }},
  {%- else %}
    {%- if field.type.endswith('?') %}
    this.{{ field.name }} = null,
    {%- elif field.type == 'String' %}
    this.{{ field.name }} = "",
    {%- elif field.type == 'int' %}
    this.{{ field.name }} = -1,
    {%- elif field.type == 'double' %}
    this.{{ field.name }} = 0.0,
    {%- elif field.type == 'bool' %}
    this.{{ field.name }} = false,
    {%- elif field.type.startswith('List') %}
    this.{{ field.name }} = const [],
    {%- elif field.type == 'DateTime' %}
    this.{{ field.name }} = DateTime(1970, 1, 1),
    {%- else %}
    this.{{ field.name }},
    {%- endif %}
  {%- endif %}
{%- endfor %}
    required this.createdAt,
    required this.updatedAt,
{%- if soft_delete %}
    this.deletedAt,  // Tornando deletedAt opcional
{%- endif %}
  });

  /// Convert model to entity
  {{ pascal_case }}Entity toEntity() {
    return {{ pascal_case }}Entity(
      id: id,
{%- for field in fields %}
      {{ field.name }}: {{ field.name }},
{%- endfor %}
      createdAt: createdAt,
      updatedAt: updatedAt,
{%- if soft_delete %}
      deletedAt: deletedAt,  // Passando deletedAt para entity
{%- endif %}
    );
  }

  /// Create model from entity
  factory {{ pascal_case }}Model.fromEntity({{ pascal_case }}Entity entity) {
    return {{ pascal_case }}Model(
      id: entity.id,
{%- for field in fields %}
      {{ field.name }}: entity.{{ field.name }},
{%- endfor %}
      createdAt: entity.createdAt,
      updatedAt: entity.updatedAt,
{%- if soft_delete %}
      deletedAt: entity.deletedAt,  // Extraindo deletedAt da entity
{%- endif %}
    );
  }

  /// Create model from JSON
  factory {{ pascal_case }}Model.fromJson(Map<String, dynamic> json) {
    return {{ pascal_case }}Model(
      id: json['id'] as String,
{%- for field in fields %}
  {%- if field.type == 'String' or field.type == 'String?' %}
      {{ field.name }}: json['{{ field.name }}'] as {{ field.type }},
  {%- elif field.type == 'int' or field.type == 'int?' %}
      {{ field.name }}: json['{{ field.name }}'] as {{ field.type }},
  {%- elif field.type == 'double' or field.type == 'double?' %}
      {{ field.name }}: json['{{ field.name }}'] as {{ field.type }},
  {%- elif field.type == 'bool?' %}
      {{ field.name }}: json['{{ field.name }}'] != null ? (json['{{ field.name }}'] as int) == 1 : nulll,
  {%- elif field.type == 'bool' %}
      {{ field.name }}: (json['{{ field.name }}'] as int) == 1,
  {%- elif field.type == 'DateTime' or field.type == 'DateTime?' %}
      {{ field.name }}: json['{{ field.name }}'] != null
          ? DateTime.parse(json['{{ field.name }}'] as String)
          : null,
  {%- elif field.type.startswith('List<') %}
      {{ field.name }}: (json['{{ field.name }}'] as List<dynamic>?)
          ?.map((e) => e as {{ field.type.replace('List<', '').replace('>', '') }})
          .toList() ?? [],
  {%- else %}
      {{ field.name }}: json['{{ field.name }}'],
  {%- endif %}
{%- endfor %}
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: DateTime.parse(json['updatedAt'] as String),
{%- if soft_delete %}
      deletedAt: json['deletedAt'] != null
          ? DateTime.parse(json['deletedAt'] as String)
          : null,  // Parseando deletedAt do JSON
{%- endif %}
    );
  }

  /// Convert to JSON
  Map<String, dynamic> toJson() {
    return {
      'id': id,
{%- for field in fields %}
  {%- if field.type == 'DateTime' or field.type == 'DateTime?' %}
      '{{ field.name }}': {{ field.name }}?.toIso8601String(),
  {%- elif field.type == 'bool' or field.type == 'bool?' %}
  {%- else %}
      '{{ field.name }}': {{ field.name }},
  {%- endif %}
{%- endfor %}
      'createdAt': createdAt.toIso8601String(),
      'updatedAt': updatedAt.toIso8601String(),
{%- if soft_delete %}
      'deletedAt': deletedAt?.toIso8601String(),  // Convertendo deletedAt para ISO string
{%- endif %}
    };
  }

  /// Create a copy with modified fields
  {{ pascal_case }}Model copyWith({
    String? id,
{%- for field in fields %}
    {{ field.type }}{% if not field.type.endswith('?') %}?{% endif %} {{ field.name }},
{%- endfor %}
    DateTime? createdAt,
    DateTime? updatedAt,
{%- if soft_delete %}
    DateTime? deletedAt,  // Adicionando deletedAt ao copyWith
{%- endif %}
  }) {
    return {{ pascal_case }}Model(
      id: id ?? this.id,
{%- for field in fields %}
      {{ field.name }}: {{ field.name }} ?? this.{{ field.name }},
{%- endfor %}
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
{%- if soft_delete %}
      deletedAt: deletedAt ?? this.deletedAt,  // Mantendo o valor original se n√£o for alterado
{%- endif %}
    );
  }
}