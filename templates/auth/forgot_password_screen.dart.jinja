import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../controllers/auth_controller.dart';
import '../widgets/auth_form_fields.dart';
import '../../../../app/theme/dimensions.dart';
import '../../../../core/widgets/loading_indicator.dart';

class ForgotPasswordScreen extends StatefulWidget {
  const ForgotPasswordScreen({Key? key}) : super(key: key);

  @override
  State<ForgotPasswordScreen> createState() => _ForgotPasswordScreenState();
}

class _ForgotPasswordScreenState extends State<ForgotPasswordScreen> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  bool _emailSent = false;

  @override
  void dispose() {
    _emailController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Reset Password'),
      ),
      body: Consumer<AuthController>(
        builder: (context, authController, child) {
          if (authController.isLoading) {
            return const LoadingIndicator(
              message: 'Sending reset instructions...',
            );
          }

          return SingleChildScrollView(
            padding: const EdgeInsets.all(Dimensions.paddingL),
            child: Form(
              key: _formKey,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  const SizedBox(height: Dimensions.marginL),
                  _buildHeader(),
                  const SizedBox(height: Dimensions.marginXL),
                  if (authController.error != null) ...[
                    _buildErrorMessage(authController.error!),
                    const SizedBox(height: Dimensions.marginM),
                  ],
                  if (_emailSent) ...[
                    _buildSuccessMessage(),
                    const SizedBox(height: Dimensions.marginM),
                  ],
                  _buildEmailField(),
                  const SizedBox(height: Dimensions.marginL),
                  _buildResetButton(),
                  const SizedBox(height: Dimensions.marginM),
                  _buildBackToLoginButton(),
                ],
              ),
            ),
          );
        },
      ),
    );
  }

  Widget _buildHeader() {
    return Column(
      children: [
        Icon(
          Icons.lock_reset,
          size: 64,
          color: Theme.of(context).primaryColor,
        ),
        const SizedBox(height: Dimensions.marginM),
        Text(
          'Forgot Password?',
          style: Theme.of(context).textTheme.headline5,
        ),
        const SizedBox(height: Dimensions.marginS),
        const Text(
          'Enter your email address and we\'ll send you instructions to reset your password.',
          textAlign: TextAlign.center,
          style: TextStyle(
            color: Colors.grey,
          ),
        ),
      ],
    );
  }

  Widget _buildErrorMessage(String error) {
    return Container(
      padding: const EdgeInsets.all(Dimensions.paddingM),
      decoration: BoxDecoration(
        color: Colors.red.shade100,
        borderRadius: BorderRadius.circular(Dimensions.radiusM),
      ),
      child: Text(
        error,
        style: TextStyle(
          color: Colors.red.shade900,
        ),
      ),
    );
  }

  Widget _buildSuccessMessage() {
    return Container(
      padding: const EdgeInsets.all(Dimensions.paddingM),
      decoration: BoxDecoration(
        color: Colors.green.shade100,
        borderRadius: BorderRadius.circular(Dimensions.radiusM),
      ),
      child: Column(
        children: [
          const Icon(
            Icons.check_circle,
            color: Colors.green,
          ),
          const SizedBox(height: Dimensions.marginS),
          Text(
            'Reset instructions sent!',
            style: TextStyle(
              fontWeight: FontWeight.bold,
              color: Colors.green.shade900,
            ),
          ),
          const SizedBox(height: Dimensions.marginS),
          Text(
            'Please check your email inbox for instructions to reset your password.',
            style: TextStyle(
              color: Colors.green.shade900,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEmailField() {
    return EmailFormField(
      controller: _emailController,
      autofocus: true,
    );
  }

  Widget _buildResetButton() {
    return ElevatedButton(
      onPressed: _handleResetPassword,
      style: ElevatedButton.styleFrom(
        padding: const EdgeInsets.symmetric(vertical: 16),
      ),
      child: const Text(
        'Send Reset Instructions',
        style: TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }

  Widget _buildBackToLoginButton() {
    return TextButton(
      onPressed: () {
        Navigator.pop(context);
      },
      child: const Text('Back to Login'),
    );
  }

  Future<void> _handleResetPassword() async {
    if (_formKey.currentState!.validate()) {
      final authController = Provider.of<AuthController>(context, listen: false);

      final success = await authController.resetPassword(
        _emailController.text.trim(),
      );

      if (success && mounted) {
        setState(() {
          _emailSent = true;
        });
      }
    }
  }
}