import 'package:equatable/equatable.dart';

/// User entity representing the authenticated user
class UserEntity extends Equatable {
  final String id;
  final String? email;
  final String? displayName;
  final String? photoUrl;
  final bool emailVerified;
  final List<String> roles;
  final Map<String, dynamic>? metadata;
  final DateTime createdAt;
  final DateTime? lastLoginAt;

  const UserEntity({
    required this.id,
    this.email,
    this.displayName,
    this.photoUrl,
    this.emailVerified = false,
    this.roles = const ['user'],
    this.metadata,
    required this.createdAt,
    this.lastLoginAt,
  });

  /// Check if the user has a specific role
  bool hasRole(String role) {
    return roles.contains(role);
  }

  /// Check if the user is an admin
  bool get isAdmin => hasRole('admin');

  @override
  List<Object?> get props => [
        id,
        email,
        displayName,
        photoUrl,
        emailVerified,
        roles,
        metadata,
        createdAt,
        lastLoginAt,
      ];

  /// Create a copy of the user with updated fields
  UserEntity copyWith({
    String? id,
    String? email,
    String? displayName,
    String? photoUrl,
    bool? emailVerified,
    List<String>? roles,
    Map<String, dynamic>? metadata,
    DateTime? createdAt,
    DateTime? lastLoginAt,
  }) {
    return UserEntity(
      id: id ?? this.id,
      email: email ?? this.email,
      displayName: displayName ?? this.displayName,
      photoUrl: photoUrl ?? this.photoUrl,
      emailVerified: emailVerified ?? this.emailVerified,
      roles: roles ?? this.roles,
      metadata: metadata ?? this.metadata,
      createdAt: createdAt ?? this.createdAt,
      lastLoginAt: lastLoginAt ?? this.lastLoginAt,
    );
  }
}