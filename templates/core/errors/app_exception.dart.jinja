import 'package:flutter/material.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart';

class AppException implements Exception {
  final String message;
  final String? code;
  final dynamic details;

  const AppException({
    required this.message,
    this.code,
    this.details,
  });

  @override
  String toString() {
    String result = 'AppException';
    if (code != null) result += ' [$code]';
    result += ': $message';
    if (details != null) result += '\nDetails: $details';
    return result;
  }
}

class UnauthorizedException extends AppException {
  UnauthorizedException({
    required String message,
    String? code = 'UNAUTHORIZED',
    dynamic details,
  }) : super(message: message, code: code, details: details);

  factory UnauthorizedException.fromContext(BuildContext context, {dynamic details}) {
    return UnauthorizedException(
      message: AppLocalizations.of(context)!.unauthorizedMessage,
      details: details,
    );
  }
}

class NotFoundException extends AppException {
  NotFoundException({
    required String message,
    String? code = 'NOT_FOUND',
    dynamic details,
  }) : super(message: message, code: code, details: details);

  factory NotFoundException.fromContext(BuildContext context, {dynamic details}) {
    return NotFoundException(
      message: AppLocalizations.of(context)!.notFoundMessage,
      details: details,
    );
  }
}

class ValidationException extends AppException {
  ValidationException({
    required String message,
    String? code = 'VALIDATION_ERROR',
    dynamic details,
  }) : super(message: message, code: code, details: details);

  factory ValidationException.fromContext(BuildContext context, {dynamic details}) {
    return ValidationException(
      message: AppLocalizations.of(context)!.validationFailed,
      details: details,
    );
  }
}
