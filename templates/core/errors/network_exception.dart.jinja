import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart';
import 'app_exception.dart';

/// Exception for network-related errors
class NetworkException extends AppException {
  const NetworkException({
    required String message,
    String? code = 'NETWORK_ERROR',
    dynamic details,
  }) : super(
          message: message,
          code: code,
          details: details,
        );

  static NetworkException fromError(BuildContext context, dynamic error) {
    final loc = AppLocalizations.of(context)!;

    if (error is SocketException) {
      return NetworkException(
        message: loc.noInternet,
        code: 'NO_INTERNET',
      );
    } else if (error is HttpException) {
      return NetworkException(
        message: loc.httpError(error.message),
        code: 'HTTP_ERROR',
      );
    } else if (error is FormatException) {
      return NetworkException(
        message: loc.invalidFormat(error.message),
        code: 'FORMAT_ERROR',
      );
    } else {
      return NetworkException(
        message: loc.unknownNetworkError(error.toString()),
        code: 'UNKNOWN',
        details: error,
      );
    }
  }
}